{"ast":null,"code":"import _toConsumableArray from\"C:/Users/hp/Desktop/new-app/proshop/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";// import React, { useEffect } from \"react\";\n// import { Link } from \"react-router-dom\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import {\n//   Row,\n//   Col,\n//   ListGroup,\n//   Image,\n//   Form,\n//   Button,\n//   Card,\n// } from \"react-bootstrap\";\n// import Message from \"../components/Message\";\n// import { addToCart, removeFromCart } from \"../actions/cartAction\";\n// const CartScreen = ({ match, location, history }) => {\n//   const productId = match.params.id;\n//   const qty = location.search ? Number(location.search.split(\"=\")[1]) : 1;\n//   const dispatch = useDispatch();\n//   const cart = useSelector((state) => state.cart);\n//   const { cartItems } = cart;\n//   console.log(cartItems);\n//   useEffect(() => {\n//     if (productId) {\n//       dispatch(addToCart(productId, qty));\n//     }\n//   }, [dispatch, productId, qty]);\n//   const removeFromCartHandler = (id) => {\n//     dispatch(removeFromCart(id));\n//   };\n//   const checkoutHandler = () => {\n//     history.push(\"/login?redirect=shipping\");\n//   };\n//   return (\n//     <Row>\n//       <Col md={8}>\n//         <h1>Shopping Cart</h1>\n//         {cartItems.length === 0 ? (\n//           <Message>\n//             Your cart is empty <Link to=\"/\">Go Back</Link>\n//           </Message>\n//         ) : (\n//           <ListGroup variant=\"flush\">\n//             {cartItems.map((item) => (\n//               <ListGroup.Item key={item.product}>\n//                 <Row>\n//                   <Col md={2}>\n//                     <Image src={item.image} alt={item.name} fluid rounded />\n//                   </Col>\n//                   <Col md={3}>\n//                     <Link to={`/product/${item.product}`}>{item.name}</Link>\n//                   </Col>\n//                   <Col md={2}>${item.price}</Col>\n//                   <Col md={2}>\n//                     <Form.Control\n//                       as=\"select\"\n//                       value={item.qty}\n//                       onChange={(e) =>\n//                         dispatch(\n//                           addToCart(item.product, Number(e.target.value))\n//                         )\n//                       }\n//                     >\n//                       {[...Array(item.countInStock).keys()].map((x) => (\n//                         <option key={x + 1} value={x + 1}>\n//                           {x + 1}\n//                         </option>\n//                       ))}\n//                     </Form.Control>\n//                   </Col>\n//                   <Col md={2}>\n//                     <Button\n//                       type=\"button\"\n//                       variant=\"light\"\n//                       onClick={() => removeFromCartHandler(item.product)}\n//                     >\n//                       <i className=\"fas fa-trash\"></i>\n//                     </Button>\n//                   </Col>\n//                 </Row>\n//               </ListGroup.Item>\n//             ))}\n//           </ListGroup>\n//         )}\n//       </Col>\n//       <Col md={4}>\n//         <Card>\n//           <ListGroup variant=\"flush\">\n//             <ListGroup.Item>\n//               <h2>\n//                 Subtotal ({cartItems.reduce((acc, item) => acc + item.qty, 0)})\n//                 items\n//               </h2>\n//               $\n//               {cartItems\n//                 .reduce((acc, item) => acc + item.qty * item.price, 0)\n//                 .toFixed(2)}\n//             </ListGroup.Item>\n//             <ListGroup.Item>\n//               <Button\n//                 type=\"button\"\n//                 className=\"btn-block\"\n//                 disabled={cartItems.length === 0}\n//                 onClick={checkoutHandler}\n//               >\n//                 Proceed To Checkout\n//               </Button>\n//             </ListGroup.Item>\n//           </ListGroup>\n//         </Card>\n//       </Col>\n//     </Row>\n//   );\n// };\n// export default CartScreen;\n// //   return (\n// //     <Row>\n// //       <Col md={8}>\n// //         <h1>Shopping Cart</h1>\n// //         {cartItems.length === 0 ? (\n// //           <Message>\n// //             Your cart is empty <Link to=\"/\">Go Back</Link>{\" \"}\n// //           </Message>\n// //         ) : (\n// //           <ListGroup variant=\"flush\">\n// //             {cartItems.map((item) => (\n// //               <ListGroup.Item key={item.product}>\n// //                 <Row>\n// //                   <Col md={2}>\n// //                     <Image src={item.image} alt={item.name} fluid rounded />\n// //                   </Col>\n// //                   <Col md={3}>\n// //                     <Link to={`/product/${item.product}`}>{item.name}</Link>\n// //                   </Col>\n// //                   <Col md={2}> ${item.price} </Col>\n// //                   <Col md={2}>\n// //                     <Form.Control\n// //                       as=\"select\"\n// //                       value={item.qty}\n// //                       onChange={(e) =>\n// //                         dispatch(\n// //                           addToCart(item.product, Number(e.target.value))\n// //                         )\n// //                       }\n// //                     >\n// //                       {[...Array(item.countInStock).keys()].map((x) => (\n// //                         <option key={x + 1} value={x + 1}>\n// //                           {x + 1}\n// //                         </option>\n// //                       ))}\n// //                     </Form.Control>\n// //                   </Col>\n// //                   <Col md={2}>\n// //                     <Button\n// //                       type=\"button\"\n// //                       variant=\"Light\"\n// //                       onClick={() => removeFromCartHandler(item.product)}\n// //                     >\n// //                       <i className=\"fas fa-trash\"></i>\n// //                     </Button>\n// //                   </Col>\n// //                 </Row>\n// //               </ListGroup.Item>\n// //             ))}\n// //           </ListGroup>\n// //         )}\n// //       </Col>\n// //       <Col md={4}>\n// //         <Card>\n// //           <ListGroup.Item></ListGroup.Item>\n// //         </Card>\n// //       </Col>\n// //     </Row>\n// //   );\n// // };\n// // export default CartScreen;\n// // import React, { useEffect } from \"react\";\n// // import { Link } from \"react-router-dom\";\n// // import { useDispatch, useSelector } from \"react-redux\";\n// // import {\n// //   Row,\n// //   Col,\n// //   ListGroup,\n// //   Image,\n// //   Form,\n// //   Button,\n// //   Card,\n// // } from \"react-bootstrap\";\n// // import Message from \"../components/Message\";\n// // import { addToCart, removeFromCart } from \"../actions/cartActions\";\n// // const CartScreen = ({ match, location, history }) => {\n// //   const productId = match.params.id;\n// //   const qty = location.search ? Number(location.search.split(\"=\")[1]) : 1;\n// //   const dispatch = useDispatch();\n// //   const cart = useSelector((state) => state.cart);\n// //   const { cartItems } = cart;\n// //   useEffect(() => {\n// //     if (productId) {\n// //       dispatch(addToCart(productId, qty));\n// //     }\n// //   }, [dispatch, productId, qty]);\n// //   const removeFromCartHandler = (id) => {\n// //     dispatch(removeFromCart(id));\n// //   };\n// //   const checkoutHandler = () => {\n// //     history.push(\"/login?redirect=shipping\");\n// //   };\n// //   return (\n// //     <Row>\n// //       <Col md={8}>\n// //         <h1>Shopping Cart</h1>\n// //         {cartItems.length === 0 ? (\n// //           <Message>\n// //             Your cart is empty <Link to=\"/\">Go Back</Link>\n// //           </Message>\n// //         ) : (\n// //           <ListGroup variant=\"flush\">\n// //             {cartItems.map((item) => (\n// //               <ListGroup.Item key={item.product}>\n// //                 <Row>\n// //                   <Col md={2}>\n// //                     <Image src={item.image} alt={item.name} fluid rounded />\n// //                   </Col>\n// //                   <Col md={3}>\n// //                     <Link to={`/product/${item.product}`}>{item.name}</Link>\n// //                   </Col>\n// //                   <Col md={2}>${item.price}</Col>\n// //                   <Col md={2}>\n// //                     <Form.Control\n// //                       as=\"select\"\n// //                       value={item.qty}\n// //                       onChange={(e) =>\n// //                         dispatch(\n// //                           addToCart(item.product, Number(e.target.value))\n// //                         )\n// //                       }\n// //                     >\n// //                       {[...Array(item.countInStock).keys()].map((x) => (\n// //                         <option key={x + 1} value={x + 1}>\n// //                           {x + 1}\n// //                         </option>\n// //                       ))}\n// //                     </Form.Control>\n// //                   </Col>\n// //                   <Col md={2}>\n// //                     <Button\n// //                       type=\"button\"\n// //                       variant=\"light\"\n// //                       onClick={() => removeFromCartHandler(item.product)}\n// //                     >\n// //                       <i className=\"fas fa-trash\"></i>\n// //                     </Button>\n// //                   </Col>\n// //                 </Row>\n// //               </ListGroup.Item>\n// //             ))}\n// //           </ListGroup>\n// //         )}\n// //       </Col>\n// //       <Col md={4}>\n// //         <Card>\n// //           <ListGroup variant=\"flush\">\n// //             <ListGroup.Item>\n// //               <h2>\n// //                 Subtotal ({cartItems.reduce((acc, item) => acc + item.qty, 0)})\n// //                 items\n// //               </h2>\n// //               $\n// //               {cartItems\n// //                 .reduce((acc, item) => acc + item.qty * item.price, 0)\n// //                 .toFixed(2)}\n// //             </ListGroup.Item>\n// //             <ListGroup.Item>\n// //               <Button\n// //                 type=\"button\"\n// //                 className=\"btn-block\"\n// //                 disabled={cartItems.length === 0}\n// //                 onClick={checkoutHandler}\n// //               >\n// //                 Proceed To Checkout\n// //               </Button>\n// //             </ListGroup.Item>\n// //           </ListGroup>\n// //         </Card>\n// //       </Col>\n// //     </Row>\n// //   );\n// // };\n// // export default CartScreen;\nimport React,{useEffect}from\"react\";import{Link}from\"react-router-dom\";import{useDispatch,useSelector}from\"react-redux\";import{Row,Col,ListGroup,Image,Form,Button,Card}from\"react-bootstrap\";import Message from\"../components/Message\";import{addToCart,removeFromCart,cartAction}from\"../actions/cartAction\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var CartScreen=function CartScreen(_ref){var match=_ref.match,location=_ref.location,history=_ref.history;var productId=match.params.id;var qty=location.search?Number(location.search.split(\"=\")[1]):1;var dispatch=useDispatch();var cart=useSelector(function(state){return state.cart;});var cartItems=cart.cartItems;useEffect(function(){if(productId){dispatch(addToCart(productId,qty));}},[dispatch,productId,qty]);var removeFromCartHandler=function removeFromCartHandler(id){dispatch(removeFromCart(id));};var checkoutHandler=function checkoutHandler(){history.push(\"/login?redirect=shipping\");};return/*#__PURE__*/_jsxs(Row,{children:[/*#__PURE__*/_jsxs(Col,{md:8,children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Shopping Cart\"}),cartItems.length===0?/*#__PURE__*/_jsxs(Message,{children:[\"Your cart is empty \",/*#__PURE__*/_jsx(Link,{to:\"/\",children:\"Go Back\"})]}):/*#__PURE__*/_jsx(ListGroup,{variant:\"flush\",children:cartItems.map(function(item){return/*#__PURE__*/_jsx(ListGroup.Item,{children:/*#__PURE__*/_jsxs(Row,{children:[/*#__PURE__*/_jsx(Col,{md:2,children:/*#__PURE__*/_jsx(Image,{src:item.image,alt:item.name,fluid:true,rounded:true})}),/*#__PURE__*/_jsx(Col,{md:3,children:/*#__PURE__*/_jsx(Link,{to:\"/product/\".concat(item.product),children:item.name})}),/*#__PURE__*/_jsxs(Col,{md:2,children:[\"$\",item.price]}),/*#__PURE__*/_jsx(Col,{md:2,children:/*#__PURE__*/_jsx(Form.Control,{as:\"select\",value:item.qty,onChange:function onChange(e){return dispatch(addToCart(item.product,Number(e.target.value)));},children:_toConsumableArray(Array(item.countInStock).keys()).map(function(x){return/*#__PURE__*/_jsx(\"option\",{value:x+1,children:x+1},x+1);})})}),/*#__PURE__*/_jsx(Col,{md:2,children:/*#__PURE__*/_jsx(Button,{type:\"button\",variant:\"light\",onClick:function onClick(){return removeFromCartHandler(item.product);},children:/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-trash\"})})})]})},item.product);})})]}),/*#__PURE__*/_jsx(Col,{md:4,children:/*#__PURE__*/_jsx(Card,{children:/*#__PURE__*/_jsxs(ListGroup,{variant:\"flush\",children:[/*#__PURE__*/_jsxs(ListGroup.Item,{children:[/*#__PURE__*/_jsxs(\"h2\",{children:[\"Subtotal (\",cartItems.reduce(function(acc,item){return acc+item.qty;},0),\") items\"]}),\"$\",cartItems.reduce(function(acc,item){return acc+item.qty*item.price;},0).toFixed(2)]}),/*#__PURE__*/_jsx(ListGroup.Item,{children:/*#__PURE__*/_jsx(Button,{type:\"button\",className:\"btn-block\",disabled:cartItems.length===0,onClick:checkoutHandler,children:\"Proceed To Checkout\"})})]})})})]});};export default CartScreen;","map":{"version":3,"sources":["C:/Users/hp/Desktop/new-app/proshop/frontend/src/screens/CartScreen.js"],"names":["React","useEffect","Link","useDispatch","useSelector","Row","Col","ListGroup","Image","Form","Button","Card","Message","addToCart","removeFromCart","cartAction","CartScreen","match","location","history","productId","params","id","qty","search","Number","split","dispatch","cart","state","cartItems","removeFromCartHandler","checkoutHandler","push","length","map","item","image","name","product","price","e","target","value","Array","countInStock","keys","x","reduce","acc","toFixed"],"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","sourcesContent":["// import React, { useEffect } from \"react\";\r\n// import { Link } from \"react-router-dom\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// import {\r\n//   Row,\r\n//   Col,\r\n//   ListGroup,\r\n//   Image,\r\n//   Form,\r\n//   Button,\r\n//   Card,\r\n// } from \"react-bootstrap\";\r\n// import Message from \"../components/Message\";\r\n// import { addToCart, removeFromCart } from \"../actions/cartAction\";\r\n\r\n// const CartScreen = ({ match, location, history }) => {\r\n//   const productId = match.params.id;\r\n\r\n//   const qty = location.search ? Number(location.search.split(\"=\")[1]) : 1;\r\n\r\n//   const dispatch = useDispatch();\r\n\r\n//   const cart = useSelector((state) => state.cart);\r\n//   const { cartItems } = cart;\r\n//   console.log(cartItems);\r\n\r\n//   useEffect(() => {\r\n//     if (productId) {\r\n//       dispatch(addToCart(productId, qty));\r\n//     }\r\n//   }, [dispatch, productId, qty]);\r\n\r\n//   const removeFromCartHandler = (id) => {\r\n//     dispatch(removeFromCart(id));\r\n//   };\r\n\r\n//   const checkoutHandler = () => {\r\n//     history.push(\"/login?redirect=shipping\");\r\n//   };\r\n//   return (\r\n//     <Row>\r\n//       <Col md={8}>\r\n//         <h1>Shopping Cart</h1>\r\n//         {cartItems.length === 0 ? (\r\n//           <Message>\r\n//             Your cart is empty <Link to=\"/\">Go Back</Link>\r\n//           </Message>\r\n//         ) : (\r\n//           <ListGroup variant=\"flush\">\r\n//             {cartItems.map((item) => (\r\n//               <ListGroup.Item key={item.product}>\r\n//                 <Row>\r\n//                   <Col md={2}>\r\n//                     <Image src={item.image} alt={item.name} fluid rounded />\r\n//                   </Col>\r\n//                   <Col md={3}>\r\n//                     <Link to={`/product/${item.product}`}>{item.name}</Link>\r\n//                   </Col>\r\n//                   <Col md={2}>${item.price}</Col>\r\n//                   <Col md={2}>\r\n//                     <Form.Control\r\n//                       as=\"select\"\r\n//                       value={item.qty}\r\n//                       onChange={(e) =>\r\n//                         dispatch(\r\n//                           addToCart(item.product, Number(e.target.value))\r\n//                         )\r\n//                       }\r\n//                     >\r\n//                       {[...Array(item.countInStock).keys()].map((x) => (\r\n//                         <option key={x + 1} value={x + 1}>\r\n//                           {x + 1}\r\n//                         </option>\r\n//                       ))}\r\n//                     </Form.Control>\r\n//                   </Col>\r\n//                   <Col md={2}>\r\n//                     <Button\r\n//                       type=\"button\"\r\n//                       variant=\"light\"\r\n//                       onClick={() => removeFromCartHandler(item.product)}\r\n//                     >\r\n//                       <i className=\"fas fa-trash\"></i>\r\n//                     </Button>\r\n//                   </Col>\r\n//                 </Row>\r\n//               </ListGroup.Item>\r\n//             ))}\r\n//           </ListGroup>\r\n//         )}\r\n//       </Col>\r\n//       <Col md={4}>\r\n//         <Card>\r\n//           <ListGroup variant=\"flush\">\r\n//             <ListGroup.Item>\r\n//               <h2>\r\n//                 Subtotal ({cartItems.reduce((acc, item) => acc + item.qty, 0)})\r\n//                 items\r\n//               </h2>\r\n//               $\r\n//               {cartItems\r\n//                 .reduce((acc, item) => acc + item.qty * item.price, 0)\r\n//                 .toFixed(2)}\r\n//             </ListGroup.Item>\r\n//             <ListGroup.Item>\r\n//               <Button\r\n//                 type=\"button\"\r\n//                 className=\"btn-block\"\r\n//                 disabled={cartItems.length === 0}\r\n//                 onClick={checkoutHandler}\r\n//               >\r\n//                 Proceed To Checkout\r\n//               </Button>\r\n//             </ListGroup.Item>\r\n//           </ListGroup>\r\n//         </Card>\r\n//       </Col>\r\n//     </Row>\r\n//   );\r\n// };\r\n\r\n// export default CartScreen;\r\n\r\n// //   return (\r\n// //     <Row>\r\n// //       <Col md={8}>\r\n// //         <h1>Shopping Cart</h1>\r\n// //         {cartItems.length === 0 ? (\r\n// //           <Message>\r\n// //             Your cart is empty <Link to=\"/\">Go Back</Link>{\" \"}\r\n// //           </Message>\r\n// //         ) : (\r\n// //           <ListGroup variant=\"flush\">\r\n// //             {cartItems.map((item) => (\r\n// //               <ListGroup.Item key={item.product}>\r\n// //                 <Row>\r\n// //                   <Col md={2}>\r\n// //                     <Image src={item.image} alt={item.name} fluid rounded />\r\n// //                   </Col>\r\n// //                   <Col md={3}>\r\n// //                     <Link to={`/product/${item.product}`}>{item.name}</Link>\r\n// //                   </Col>\r\n// //                   <Col md={2}> ${item.price} </Col>\r\n// //                   <Col md={2}>\r\n// //                     <Form.Control\r\n// //                       as=\"select\"\r\n// //                       value={item.qty}\r\n// //                       onChange={(e) =>\r\n// //                         dispatch(\r\n// //                           addToCart(item.product, Number(e.target.value))\r\n// //                         )\r\n// //                       }\r\n// //                     >\r\n// //                       {[...Array(item.countInStock).keys()].map((x) => (\r\n// //                         <option key={x + 1} value={x + 1}>\r\n// //                           {x + 1}\r\n// //                         </option>\r\n// //                       ))}\r\n// //                     </Form.Control>\r\n// //                   </Col>\r\n\r\n// //                   <Col md={2}>\r\n// //                     <Button\r\n// //                       type=\"button\"\r\n// //                       variant=\"Light\"\r\n// //                       onClick={() => removeFromCartHandler(item.product)}\r\n// //                     >\r\n// //                       <i className=\"fas fa-trash\"></i>\r\n// //                     </Button>\r\n// //                   </Col>\r\n// //                 </Row>\r\n// //               </ListGroup.Item>\r\n// //             ))}\r\n// //           </ListGroup>\r\n// //         )}\r\n// //       </Col>\r\n// //       <Col md={4}>\r\n// //         <Card>\r\n// //           <ListGroup.Item></ListGroup.Item>\r\n// //         </Card>\r\n// //       </Col>\r\n// //     </Row>\r\n// //   );\r\n// // };\r\n\r\n// // export default CartScreen;\r\n\r\n// // import React, { useEffect } from \"react\";\r\n// // import { Link } from \"react-router-dom\";\r\n// // import { useDispatch, useSelector } from \"react-redux\";\r\n// // import {\r\n// //   Row,\r\n// //   Col,\r\n// //   ListGroup,\r\n// //   Image,\r\n// //   Form,\r\n// //   Button,\r\n// //   Card,\r\n// // } from \"react-bootstrap\";\r\n// // import Message from \"../components/Message\";\r\n// // import { addToCart, removeFromCart } from \"../actions/cartActions\";\r\n\r\n// // const CartScreen = ({ match, location, history }) => {\r\n// //   const productId = match.params.id;\r\n\r\n// //   const qty = location.search ? Number(location.search.split(\"=\")[1]) : 1;\r\n\r\n// //   const dispatch = useDispatch();\r\n\r\n// //   const cart = useSelector((state) => state.cart);\r\n// //   const { cartItems } = cart;\r\n\r\n// //   useEffect(() => {\r\n// //     if (productId) {\r\n// //       dispatch(addToCart(productId, qty));\r\n// //     }\r\n// //   }, [dispatch, productId, qty]);\r\n\r\n// //   const removeFromCartHandler = (id) => {\r\n// //     dispatch(removeFromCart(id));\r\n// //   };\r\n\r\n// //   const checkoutHandler = () => {\r\n// //     history.push(\"/login?redirect=shipping\");\r\n// //   };\r\n\r\n// //   return (\r\n// //     <Row>\r\n// //       <Col md={8}>\r\n// //         <h1>Shopping Cart</h1>\r\n// //         {cartItems.length === 0 ? (\r\n// //           <Message>\r\n// //             Your cart is empty <Link to=\"/\">Go Back</Link>\r\n// //           </Message>\r\n// //         ) : (\r\n// //           <ListGroup variant=\"flush\">\r\n// //             {cartItems.map((item) => (\r\n// //               <ListGroup.Item key={item.product}>\r\n// //                 <Row>\r\n// //                   <Col md={2}>\r\n// //                     <Image src={item.image} alt={item.name} fluid rounded />\r\n// //                   </Col>\r\n// //                   <Col md={3}>\r\n// //                     <Link to={`/product/${item.product}`}>{item.name}</Link>\r\n// //                   </Col>\r\n// //                   <Col md={2}>${item.price}</Col>\r\n// //                   <Col md={2}>\r\n// //                     <Form.Control\r\n// //                       as=\"select\"\r\n// //                       value={item.qty}\r\n// //                       onChange={(e) =>\r\n// //                         dispatch(\r\n// //                           addToCart(item.product, Number(e.target.value))\r\n// //                         )\r\n// //                       }\r\n// //                     >\r\n// //                       {[...Array(item.countInStock).keys()].map((x) => (\r\n// //                         <option key={x + 1} value={x + 1}>\r\n// //                           {x + 1}\r\n// //                         </option>\r\n// //                       ))}\r\n// //                     </Form.Control>\r\n// //                   </Col>\r\n// //                   <Col md={2}>\r\n// //                     <Button\r\n// //                       type=\"button\"\r\n// //                       variant=\"light\"\r\n// //                       onClick={() => removeFromCartHandler(item.product)}\r\n// //                     >\r\n// //                       <i className=\"fas fa-trash\"></i>\r\n// //                     </Button>\r\n// //                   </Col>\r\n// //                 </Row>\r\n// //               </ListGroup.Item>\r\n// //             ))}\r\n// //           </ListGroup>\r\n// //         )}\r\n// //       </Col>\r\n// //       <Col md={4}>\r\n// //         <Card>\r\n// //           <ListGroup variant=\"flush\">\r\n// //             <ListGroup.Item>\r\n// //               <h2>\r\n// //                 Subtotal ({cartItems.reduce((acc, item) => acc + item.qty, 0)})\r\n// //                 items\r\n// //               </h2>\r\n// //               $\r\n// //               {cartItems\r\n// //                 .reduce((acc, item) => acc + item.qty * item.price, 0)\r\n// //                 .toFixed(2)}\r\n// //             </ListGroup.Item>\r\n// //             <ListGroup.Item>\r\n// //               <Button\r\n// //                 type=\"button\"\r\n// //                 className=\"btn-block\"\r\n// //                 disabled={cartItems.length === 0}\r\n// //                 onClick={checkoutHandler}\r\n// //               >\r\n// //                 Proceed To Checkout\r\n// //               </Button>\r\n// //             </ListGroup.Item>\r\n// //           </ListGroup>\r\n// //         </Card>\r\n// //       </Col>\r\n// //     </Row>\r\n// //   );\r\n// // };\r\n\r\n// // export default CartScreen;\r\n\r\nimport React, { useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  Row,\r\n  Col,\r\n  ListGroup,\r\n  Image,\r\n  Form,\r\n  Button,\r\n  Card,\r\n} from \"react-bootstrap\";\r\nimport Message from \"../components/Message\";\r\nimport { addToCart, removeFromCart, cartAction } from \"../actions/cartAction\";\r\n\r\nconst CartScreen = ({ match, location, history }) => {\r\n  const productId = match.params.id;\r\n\r\n  const qty = location.search ? Number(location.search.split(\"=\")[1]) : 1;\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const cart = useSelector((state) => state.cart);\r\n  const { cartItems } = cart;\r\n\r\n  useEffect(() => {\r\n    if (productId) {\r\n      dispatch(addToCart(productId, qty));\r\n    }\r\n  }, [dispatch, productId, qty]);\r\n\r\n  const removeFromCartHandler = (id) => {\r\n    dispatch(removeFromCart(id));\r\n  };\r\n\r\n  const checkoutHandler = () => {\r\n    history.push(\"/login?redirect=shipping\");\r\n  };\r\n\r\n  return (\r\n    <Row>\r\n      <Col md={8}>\r\n        <h1>Shopping Cart</h1>\r\n        {cartItems.length === 0 ? (\r\n          <Message>\r\n            Your cart is empty <Link to=\"/\">Go Back</Link>\r\n          </Message>\r\n        ) : (\r\n          <ListGroup variant=\"flush\">\r\n            {cartItems.map((item) => (\r\n              <ListGroup.Item key={item.product}>\r\n                <Row>\r\n                  <Col md={2}>\r\n                    <Image src={item.image} alt={item.name} fluid rounded />\r\n                  </Col>\r\n                  <Col md={3}>\r\n                    <Link to={`/product/${item.product}`}>{item.name}</Link>\r\n                  </Col>\r\n                  <Col md={2}>${item.price}</Col>\r\n                  <Col md={2}>\r\n                    <Form.Control\r\n                      as=\"select\"\r\n                      value={item.qty}\r\n                      onChange={(e) =>\r\n                        dispatch(\r\n                          addToCart(item.product, Number(e.target.value))\r\n                        )\r\n                      }\r\n                    >\r\n                      {[...Array(item.countInStock).keys()].map((x) => (\r\n                        <option key={x + 1} value={x + 1}>\r\n                          {x + 1}\r\n                        </option>\r\n                      ))}\r\n                    </Form.Control>\r\n                  </Col>\r\n                  <Col md={2}>\r\n                    <Button\r\n                      type=\"button\"\r\n                      variant=\"light\"\r\n                      onClick={() => removeFromCartHandler(item.product)}\r\n                    >\r\n                      <i className=\"fas fa-trash\"></i>\r\n                    </Button>\r\n                  </Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n            ))}\r\n          </ListGroup>\r\n        )}\r\n      </Col>\r\n      <Col md={4}>\r\n        <Card>\r\n          <ListGroup variant=\"flush\">\r\n            <ListGroup.Item>\r\n              <h2>\r\n                Subtotal ({cartItems.reduce((acc, item) => acc + item.qty, 0)})\r\n                items\r\n              </h2>\r\n              $\r\n              {cartItems\r\n                .reduce((acc, item) => acc + item.qty * item.price, 0)\r\n                .toFixed(2)}\r\n            </ListGroup.Item>\r\n            <ListGroup.Item>\r\n              <Button\r\n                type=\"button\"\r\n                className=\"btn-block\"\r\n                disabled={cartItems.length === 0}\r\n                onClick={checkoutHandler}\r\n              >\r\n                Proceed To Checkout\r\n              </Button>\r\n            </ListGroup.Item>\r\n          </ListGroup>\r\n        </Card>\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default CartScreen;\r\n"]},"metadata":{},"sourceType":"module"}