{"ast":null,"code":"import axios from \"axios\";\nimport { CART_CLEAR_ITEMS } from \"../constants/cartConstants\";\nimport { ORDER_CREATE_REQUEST, ORDER_CREATE_SUCCESS, ORDER_CREATE_FAIL //   ORDER_DETAILS_FAIL,\n//   ORDER_DETAILS_SUCCESS,\n//   ORDER_DETAILS_REQUEST,\n//   ORDER_PAY_FAIL,\n//   ORDER_PAY_SUCCESS,\n//   ORDER_PAY_REQUEST,\n//   ORDER_LIST_MY_REQUEST,\n//   ORDER_LIST_MY_SUCCESS,\n//   ORDER_LIST_MY_FAIL,\n//   ORDER_LIST_FAIL,\n//   ORDER_LIST_SUCCESS,\n//   ORDER_LIST_REQUEST,\n//   ORDER_DELIVER_FAIL,\n//   ORDER_DELIVER_SUCCESS,\n//   ORDER_DELIVER_REQUEST,\n} from \"../constants/orderConstants\"; // import { logout } from \"./userActions\";\n// export const createOrder = (order) => async (dispatch, getState) => {\n//   try {\n//     dispatch({\n//       type: ORDER_CREATE_REQUEST,\n//     });\n//     const {\n//       userLogin: { userInfo },\n//     } = getState();\n//     const config = {\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//         Authorization: `Bearer ${userInfo.token}`,\n//       },\n//     };\n//     const { data } = await axios.post(`/api/orders`, order, config);\n//     dispatch({\n//       type: ORDER_CREATE_SUCCESS,\n//       payload: data,\n//     });\n//     dispatch({\n//       type: CART_CLEAR_ITEMS,\n//       payload: data,\n//     });\n//     localStorage.removeItem(\"cartItems\");\n//   } catch (error) {\n//     const message =\n//       error.response && error.response.data.message\n//         ? error.response.data.message\n//         : error.message;\n//     if (message === \"Not authorized, token failed\") {\n//       dispatch(logout());\n//     }\n//     dispatch({\n//       type: ORDER_CREATE_FAIL,\n//       payload: message,\n//     });\n//   }\n// };\n// export const getOrderDetails = (id) => async (dispatch, getState) => {\n//   try {\n//     dispatch({\n//       type: ORDER_DETAILS_REQUEST,\n//     })\n//     const {\n//       userLogin: { userInfo },\n//     } = getState()\n//     const config = {\n//       headers: {\n//         Authorization: `Bearer ${userInfo.token}`,\n//       },\n//     }\n//     const { data } = await axios.get(`/api/orders/${id}`, config)\n//     dispatch({\n//       type: ORDER_DETAILS_SUCCESS,\n//       payload: data,\n//     })\n//   } catch (error) {\n//     const message =\n//       error.response && error.response.data.message\n//         ? error.response.data.message\n//         : error.message\n//     if (message === 'Not authorized, token failed') {\n//       dispatch(logout())\n//     }\n//     dispatch({\n//       type: ORDER_DETAILS_FAIL,\n//       payload: message,\n//     })\n//   }\n// }\n// export const payOrder = (orderId, paymentResult) => async (\n//   dispatch,\n//   getState\n// ) => {\n//   try {\n//     dispatch({\n//       type: ORDER_PAY_REQUEST,\n//     })\n//     const {\n//       userLogin: { userInfo },\n//     } = getState()\n//     const config = {\n//       headers: {\n//         'Content-Type': 'application/json',\n//         Authorization: `Bearer ${userInfo.token}`,\n//       },\n//     }\n//     const { data } = await axios.put(\n//       `/api/orders/${orderId}/pay`,\n//       paymentResult,\n//       config\n//     )\n//     dispatch({\n//       type: ORDER_PAY_SUCCESS,\n//       payload: data,\n//     })\n//   } catch (error) {\n//     const message =\n//       error.response && error.response.data.message\n//         ? error.response.data.message\n//         : error.message\n//     if (message === 'Not authorized, token failed') {\n//       dispatch(logout())\n//     }\n//     dispatch({\n//       type: ORDER_PAY_FAIL,\n//       payload: message,\n//     })\n//   }\n// }\n// export const deliverOrder = (order) => async (dispatch, getState) => {\n//   try {\n//     dispatch({\n//       type: ORDER_DELIVER_REQUEST,\n//     })\n//     const {\n//       userLogin: { userInfo },\n//     } = getState()\n//     const config = {\n//       headers: {\n//         Authorization: `Bearer ${userInfo.token}`,\n//       },\n//     }\n//     const { data } = await axios.put(\n//       `/api/orders/${order._id}/deliver`,\n//       {},\n//       config\n//     )\n//     dispatch({\n//       type: ORDER_DELIVER_SUCCESS,\n//       payload: data,\n//     })\n//   } catch (error) {\n//     const message =\n//       error.response && error.response.data.message\n//         ? error.response.data.message\n//         : error.message\n//     if (message === 'Not authorized, token failed') {\n//       dispatch(logout())\n//     }\n//     dispatch({\n//       type: ORDER_DELIVER_FAIL,\n//       payload: message,\n//     })\n//   }\n// }\n// export const listMyOrders = () => async (dispatch, getState) => {\n//   try {\n//     dispatch({\n//       type: ORDER_LIST_MY_REQUEST,\n//     })\n//     const {\n//       userLogin: { userInfo },\n//     } = getState()\n//     const config = {\n//       headers: {\n//         Authorization: `Bearer ${userInfo.token}`,\n//       },\n//     }\n//     const { data } = await axios.get(`/api/orders/myorders`, config)\n//     dispatch({\n//       type: ORDER_LIST_MY_SUCCESS,\n//       payload: data,\n//     })\n//   } catch (error) {\n//     const message =\n//       error.response && error.response.data.message\n//         ? error.response.data.message\n//         : error.message\n//     if (message === 'Not authorized, token failed') {\n//       dispatch(logout())\n//     }\n//     dispatch({\n//       type: ORDER_LIST_MY_FAIL,\n//       payload: message,\n//     })\n//   }\n// }\n// export const listOrders = () => async (dispatch, getState) => {\n//   try {\n//     dispatch({\n//       type: ORDER_LIST_REQUEST,\n//     })\n//     const {\n//       userLogin: { userInfo },\n//     } = getState()\n//     const config = {\n//       headers: {\n//         Authorization: `Bearer ${userInfo.token}`,\n//       },\n//     }\n//     const { data } = await axios.get(`/api/orders`, config)\n//     dispatch({\n//       type: ORDER_LIST_SUCCESS,\n//       payload: data,\n//     })\n//   } catch (error) {\n//     const message =\n//       error.response && error.response.data.message\n//         ? error.response.data.message\n//         : error.message\n//     if (message === 'Not authorized, token failed') {\n//       dispatch(logout())\n//     }\n//     dispatch({\n//       type: ORDER_LIST_FAIL,\n//       payload: message,\n//     })\n//   }\n// }","map":{"version":3,"sources":["C:/Users/hp/Desktop/new-app/proshop/frontend/src/actions/orderAction.js"],"names":["axios","CART_CLEAR_ITEMS","ORDER_CREATE_REQUEST","ORDER_CREATE_SUCCESS","ORDER_CREATE_FAIL"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,QAAiC,4BAAjC;AACA,SACEC,oBADF,EAEEC,oBAFF,EAGEC,iBAHF,CAIE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBF,OAmBO,6BAnBP,C,CAosourcesContent":["import axios from \"axios\";\r\nimport { CART_CLEAR_ITEMS } from \"../constants/cartConstants\";\r\nimport {\r\n  ORDER_CREATE_REQUEST,\r\n  ORDER_CREATE_SUCCESS,\r\n  ORDER_CREATE_FAIL,\r\n  //   ORDER_DETAILS_FAIL,\r\n  //   ORDER_DETAILS_SUCCESS,\r\n  //   ORDER_DETAILS_REQUEST,\r\n  //   ORDER_PAY_FAIL,\r\n  //   ORDER_PAY_SUCCESS,\r\n  //   ORDER_PAY_REQUEST,\r\n  //   ORDER_LIST_MY_REQUEST,\r\n  //   ORDER_LIST_MY_SUCCESS,\r\n  //   ORDER_LIST_MY_FAIL,\r\n  //   ORDER_LIST_FAIL,\r\n  //   ORDER_LIST_SUCCESS,\r\n  //   ORDER_LIST_REQUEST,\r\n  //   ORDER_DELIVER_FAIL,\r\n  //   ORDER_DELIVER_SUCCESS,\r\n  //   ORDER_DELIVER_REQUEST,\r\n} from \"../constants/orderConstants\";\r\n// import { logout } from \"./userActions\";\r\n\r\n// export const createOrder = (order) => async (dispatch, getState) => {\r\n//   try {\r\n//     dispatch({\r\n//       type: ORDER_CREATE_REQUEST,\r\n//     });\r\n\r\n//     const {\r\n//       userLogin: { userInfo },\r\n//     } = getState();\r\n\r\n//     const config = {\r\n//       headers: {\r\n//         \"Content-Type\": \"application/json\",\r\n//         Authorization: `Bearer ${userInfo.token}`,\r\n//       },\r\n//     };\r\n\r\n//     const { data } = await axios.post(`/api/orders`, order, config);\r\n\r\n//     dispatch({\r\n//       type: ORDER_CREATE_SUCCESS,\r\n//       payload: data,\r\n//     });\r\n//     dispatch({\r\n//       type: CART_CLEAR_ITEMS,\r\n//       payload: data,\r\n//     });\r\n//     localStorage.removeItem(\"cartItems\");\r\n//   } catch (error) {\r\n//     const message =\r\n//       error.response && error.response.data.message\r\n//         ? error.response.data.message\r\n//         : error.message;\r\n//     if (message === \"Not authorized, token failed\") {\r\n//       dispatch(logout());\r\n//     }\r\n//     dispatch({\r\n//       type: ORDER_CREATE_FAIL,\r\n//       payload: message,\r\n//     });\r\n//   }\r\n// };\r\n\r\n// export const getOrderDetails = (id) => async (dispatch, getState) => {\r\n//   try {\r\n//     dispatch({\r\n//       type: ORDER_DETAILS_REQUEST,\r\n//     })\r\n\r\n//     const {\r\n//       userLogin: { userInfo },\r\n//     } = getState()\r\n\r\n//     const config = {\r\n//       headers: {\r\n//         Authorization: `Bearer ${userInfo.token}`,\r\n//       },\r\n//     }\r\n\r\n//     const { data } = await axios.get(`/api/orders/${id}`, config)\r\n\r\n//     dispatch({\r\n//       type: ORDER_DETAILS_SUCCESS,\r\n//       payload: data,\r\n//     })\r\n//   } catch (error) {\r\n//     const message =\r\n//       error.response && error.response.data.message\r\n//         ? error.response.data.message\r\n//         : error.message\r\n//     if (message === 'Not authorized, token failed') {\r\n//       dispatch(logout())\r\n//     }\r\n//     dispatch({\r\n//       type: ORDER_DETAILS_FAIL,\r\n//       payload: message,\r\n//     })\r\n//   }\r\n// }\r\n\r\n// export const payOrder = (orderId, paymentResult) => async (\r\n//   dispatch,\r\n//   getState\r\n// ) => {\r\n//   try {\r\n//     dispatch({\r\n//       type: ORDER_PAY_REQUEST,\r\n//     })\r\n\r\n//     const {\r\n//       userLogin: { userInfo },\r\n//     } = getState()\r\n\r\n//     const config = {\r\n//       headers: {\r\n//         'Content-Type': 'application/json',\r\n//         Authorization: `Bearer ${userInfo.token}`,\r\n//       },\r\n//     }\r\n\r\n//     const { data } = await axios.put(\r\n//       `/api/orders/${orderId}/pay`,\r\n//       paymentResult,\r\n//       config\r\n//     )\r\n\r\n//     dispatch({\r\n//       type: ORDER_PAY_SUCCESS,\r\n//       payload: data,\r\n//     })\r\n//   } catch (error) {\r\n//     const message =\r\n//       error.response && error.response.data.message\r\n//         ? error.response.data.message\r\n//         : error.message\r\n//     if (message === 'Not authorized, token failed') {\r\n//       dispatch(logout())\r\n//     }\r\n//     dispatch({\r\n//       type: ORDER_PAY_FAIL,\r\n//       payload: message,\r\n//     })\r\n//   }\r\n// }\r\n\r\n// export const deliverOrder = (order) => async (dispatch, getState) => {\r\n//   try {\r\n//     dispatch({\r\n//       type: ORDER_DELIVER_REQUEST,\r\n//     })\r\n\r\n//     const {\r\n//       userLogin: { userInfo },\r\n//     } = getState()\r\n\r\n//     const config = {\r\n//       headers: {\r\n//         Authorization: `Bearer ${userInfo.token}`,\r\n//       },\r\n//     }\r\n\r\n//     const { data } = await axios.put(\r\n//       `/api/orders/${order._id}/deliver`,\r\n//       {},\r\n//       config\r\n//     )\r\n\r\n//     dispatch({\r\n//       type: ORDER_DELIVER_SUCCESS,\r\n//       payload: data,\r\n//     })\r\n//   } catch (error) {\r\n//     const message =\r\n//       error.response && error.response.data.message\r\n//         ? error.response.data.message\r\n//         : error.message\r\n//     if (message === 'Not authorized, token failed') {\r\n//       dispatch(logout())\r\n//     }\r\n//     dispatch({\r\n//       type: ORDER_DELIVER_FAIL,\r\n//       payload: message,\r\n//     })\r\n//   }\r\n// }\r\n\r\n// export const listMyOrders = () => async (dispatch, getState) => {\r\n//   try {\r\n//     dispatch({\r\n//       type: ORDER_LIST_MY_REQUEST,\r\n//     })\r\n\r\n//     const {\r\n//       userLogin: { userInfo },\r\n//     } = getState()\r\n\r\n//     const config = {\r\n//       headers: {\r\n//         Authorization: `Bearer ${userInfo.token}`,\r\n//       },\r\n//     }\r\n\r\n//     const { data } = await axios.get(`/api/orders/myorders`, config)\r\n\r\n//     dispatch({\r\n//       type: ORDER_LIST_MY_SUCCESS,\r\n//       payload: data,\r\n//     })\r\n//   } catch (error) {\r\n//     const message =\r\n//       error.response && error.response.data.message\r\n//         ? error.response.data.message\r\n//         : error.message\r\n//     if (message === 'Not authorized, token failed') {\r\n//       dispatch(logout())\r\n//     }\r\n//     dispatch({\r\n//       type: ORDER_LIST_MY_FAIL,\r\n//       payload: message,\r\n//     })\r\n//   }\r\n// }\r\n\r\n// export const listOrders = () => async (dispatch, getState) => {\r\n//   try {\r\n//     dispatch({\r\n//       type: ORDER_LIST_REQUEST,\r\n//     })\r\n\r\n//     const {\r\n//       userLogin: { userInfo },\r\n//     } = getState()\r\n\r\n//     const config = {\r\n//       headers: {\r\n//         Authorization: `Bearer ${userInfo.token}`,\r\n//       },\r\n//     }\r\n\r\n//     const { data } = await axios.get(`/api/orders`, config)\r\n\r\n//     dispatch({\r\n//       type: ORDER_LIST_SUCCESS,\r\n//       payload: data,\r\n//     })\r\n//   } catch (error) {\r\n//     const message =\r\n//       error.response && error.response.data.message\r\n//         ? error.response.data.message\r\n//         : error.message\r\n//     if (message === 'Not authorized, token failed') {\r\n//       dispatch(logout())\r\n//     }\r\n//     dispatch({\r\n//       type: ORDER_LIST_FAIL,\r\n//       payload: message,\r\n//     })\r\n//   }\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}